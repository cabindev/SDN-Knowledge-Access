generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  courses   Course[]

  @@map("categories")
}

model Course {
  id          String    @id @default(uuid())
  name        String    @unique
  image_link  String
  description String
  create_at   DateTime  @default(now())
  update_at   DateTime  @updatedAt
  category_id String?
  category    Category? @relation(fields: [category_id], references: [id])
  episodes    Episode[]

  @@map("courses")
}

model Episode {
  id           String            @id @default(uuid())
  order        Int
  name         String
  youtube_link String
  create_at    DateTime          @default(now())
  update_at    DateTime          @updatedAt
  course_id    String?
  course       Course?           @relation(fields: [course_id], references: [id])
  viewed       EpisodeOnMember[]

  @@map("episodes")
}

enum Role {
  normal
  manager
}

model Member {
  id        String            @id @default(uuid())
  email     String            @unique
  password  String
  role      Role              @default(normal)
  create_at DateTime          @default(now())
  update_at DateTime          @updatedAt
  watched   EpisodeOnMember[]

  @@map("members")
}

model EpisodeOnMember {
  episode    Episode  @relation(fields: [episode_id], references: [id])
  episode_id String
  member     Member   @relation(fields: [member_id], references: [id])
  member_id  String
  create_at  DateTime @default(now())
  update_at  DateTime @updatedAt

  @@id([episode_id, member_id])
}
